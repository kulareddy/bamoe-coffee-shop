version: '3.8'

services:
  # Data Index Service
  kogito-data-index:
    image: quay.io/bamoe/data-index-service:${KOGITO_VERSION}
    container_name: kogito-data-index
    ports:
      - "${INDEX_SERVICE_PORT:-8180}:8080"
    volumes:
      - ./persistence/protobuf:/home/kogito/data/protobufs/
    environment:
      QUARKUS_DATASOURCE_USERNAME: ${POSTGRES_USER}
      QUARKUS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      QUARKUS_FLYWAY_MIGRATE_AT_START: "true"
      QUARKUS_FLYWAY_BASELINE_ON_MIGRATE: "true"
      QUARKUS_FLYWAY_TABLE: FLYWAY_DATA_INDEX
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_QUARKUS_PROFILE: kafka-events-support
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - kogito-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kogito-jobs-service:
    image: quay.io/bamoe/jobs-service:${KOGITO_VERSION}
    container_name: kogito-jobs-service
    ports:
      - "${JOBS_SERVICE_PORT:-8380}:8080"
    environment:
      QUARKUS_DATASOURCE_USERNAME: ${POSTGRES_USER}
      QUARKUS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_FLYWAY_MIGRATE_AT_START: "true"
      QUARKUS_FLYWAY_BASELINE_ON_MIGRATE: "true"
      QUARKUS_FLYWAY_TABLE: FLYWAY_JOBS_SERVICE
      QUARKUS_PROFILE: events-support
      # QUARKUS_HTTP_PORT: 8580
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - kogito-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # BAMOE Management Console
  kogito-management-console:
    image: quay.io/bamoe/management-console:${KOGITO_VERSION}
    container_name: kogito-management-console
    ports:
      - "8280:8080"
    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://${KOGITO_DATAINDEX_HOST:kogito-data-index}:${KOGITO_DATAINDEX_PORT:8080}/data-index
      KOGITO_SERVICE_URL: http://${KOGITO_SERVICE_HOST:kogito-jobs-service}:${KOGITO_SERVICE_PORT:8080}
      # For local development (services running on host machine):
      KOGITO_RUNTIME_SERVICE_URL: |
        http://host.docker.internal:8081=Brew Service|Order Coffee,
        http://host.docker.internal:8082=Order Service|Process Orders
      # For containerized services (when uncommenting the services above):
      # KOGITO_RUNTIME_SERVICE_URL: |
      #   http://kogito-brew-service:8080=Brew Service|Order Coffee,
      #   http://kogito-order-service:8080=Order Service|Process Orders
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
    depends_on:
      - jobs-service
    networks:
      - kogito-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  # BAMOE Maven Repository - First to start
  bamoe-maven-repo:
    image: quay.io/bamoe/maven-repository:${KOGITO_VERSION}
    container_name: bamoe-maven-repository
    ports:
      - "${MAVEN_REPO_PORT:-9080}:8080"
    networks:
      - kogito-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # PostgreSQL Database - Official Library Image
  postgres:
    image: postgres:17-alpine
    container_name: kogito-postgres
    environment:
      POSTGRES_DB: kogito
      POSTGRES_USER: kogito
      POSTGRES_PASSWORD: kogito
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kogito-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kogito -d kogito"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: kafka-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
    - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - kogito-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
    - "${KAFKA_PORT:-9092}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kogito-network

  # Kogito Services
  # brew-app:
  #   build: 
  #     context: ./brew-app
  #     dockerfile: src/main/docker/Dockerfile.jvm
  #   container_name: kogito-brew-service
  #   ports:
  #     - "8081:8080"
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     QUARKUS_DATASOURCE_USERNAME: ${POSTGRES_USER}
  #     QUARKUS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
  #     QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
  #   depends_on:
  #     - kafka
  #     - postgres
  #   networks:
  #     - kogito-network

  # order-app:
  #   build:
  #     context: ./order-app
  #     dockerfile: src/main/docker/Dockerfile.jvm
  #   container_name: kogito-order-service
  #   ports:
  #     - "8082:8080"
  #   environment:
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     QUARKUS_DATASOURCE_USERNAME: ${POSTGRES_USER}
  #     QUARKUS_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
  #     QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
  #   depends_on:
  #     - kafka
  #     - postgres
  #   networks:
  #     - kogito-network

volumes:
  postgres_data:
    driver: local

networks:
  kogito-network:
    driver: bridge
